
import { GoogleGenAI } from "@google/genai";
import { LEARN_TALES_SYSTEM_INSTRUCTION, RESPONSE_JSON_SCHEMA } from '../constants';
import type { VyasAIOutput } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export const generateEducationalContent = async (
    classGrade: string,
    subject: string,
    topic: string,
    language: string
): Promise<VyasAIOutput> => {
    try {
        const prompt = `Generate content for the following request: Class: ${classGrade}, Subject: ${subject}, Topic: ${topic}. IMPORTANT: The entire response, including story, quiz, and takeaways, must be in ${language}.`;

        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: prompt,
            config: {
                systemInstruction: LEARN_TALES_SYSTEM_INSTRUCTION,
                responseMimeType: "application/json",
                responseSchema: RESPONSE_JSON_SCHEMA,
                temperature: 0.7,
            }
        });

        const jsonText = response.text.trim();
        const parsedData = JSON.parse(jsonText);
        
        // Basic validation
        if (!parsedData.story || !parsedData.quiz || !parsedData.takeaways || !parsedData.image_prompt) {
            throw new Error("Invalid data structure received from API.");
        }

        return parsedData as VyasAIOutput;

    } catch (error) {
        console.error("Error generating content:", error);
        if (error instanceof Error) {
            throw new Error(`Failed to generate educational content: ${error.message}`);
        }
        throw new Error("An unknown error occurred while generating content.");
    }
};

export const generateStoryImage = async (prompt: string): Promise<string> => {
    try {
        const fullPrompt = `${prompt}, in the style of a children's book illustration, vibrant colors, friendly and cheerful.`;
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: fullPrompt,
            config: {
              numberOfImages: 1,
              outputMimeType: 'image/jpeg',
              aspectRatio: '16:9',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        } else {
            throw new Error("No image was generated by the model.");
        }

    } catch (error) {
        console.error("Error generating image:", error);
        if (error instanceof Error) {
            throw new Error(`Failed to generate story image: ${error.message}`);
        }
        throw new Error("An unknown error occurred while generating the image.");
    }
};
